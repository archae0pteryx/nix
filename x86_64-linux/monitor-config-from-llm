# lsusb
# xrand --verbose

# method 1
{
  services.xserver.displayManager.setupCommands = ''
    ${pkgs.xorg.xrandr}/bin/xrandr \
      --output HDMI-3 --primary --mode 1920x1080 --pos 0x0 \
      --output HDMI-2 --mode 1920x1080 --pos 1920x0
  '';

  # Optional: Use udev rule to ensure consistent naming
  services.udev.extraRules = ''
    # Persistent name for Sceptre monitors
    SUBSYSTEM=="drm", ATTRS{vendor}=="0x1e14", ATTRS{model}=="Sceptre C27", SYMLINK+="monitor-%k"
  '';
}



# method 1 using a manual script and running when display manager starts
{
  environment.systemPackages = with pkgs; [
    (writeScriptBin "setup-monitors" ''
      #!/usr/bin/env bash
      MONITOR1=$(xrandr | grep "HDMI-3 connected" | cut -d' ' -f1)
      MONITOR2=$(xrandr | grep "HDMI-2 connected" | cut -d' ' -f1)
      
      xrandr --output $MONITOR1 --primary --mode 1920x1080 --pos 0x0 \
             --output $MONITOR2 --mode 1920x1080 --pos 1920x0
    '')
  ];
}

# audomatic login

{
  services.xserver.displayManager.setupCommands = ''
    /run/current-system/sw/bin/setup-monitors
  '';

  # Or if using a display manager like SDDM/GDM
  services.displayManager.setupCommands = ''
    /run/current-system/sw/bin/setup-monitors
  '';
}



{
  services.xserver.displayManager.setupCommands = ''
    ${pkgs.xorg.xrandr}/bin/xrandr \
      --output HDMI-3 --primary --mode 1920x1080 --pos 0x0 \
      --output HDMI-2 --mode 1920x1080 --pos 1920x0
  '';

  # Optional: Use udev rule to ensure consistent naming
  services.udev.extraRules = ''
    # Persistent name for Sceptre monitors
    SUBSYSTEM=="drm", ATTRS{vendor}=="0x1e14", ATTRS{model}=="Sceptre C27", SYMLINK+="monitor-%k"
  '';
}
# OR
{
  environment.systemPackages = with pkgs; [
    (writeScriptBin "setup-monitors" ''
      #!/usr/bin/env bash
      MONITOR1=$(xrandr | grep "HDMI-3 connected" | cut -d' ' -f1)
      MONITOR2=$(xrandr | grep "HDMI-2 connected" | cut -d' ' -f1)
      
      xrandr --output $MONITOR1 --primary --mode 1920x1080 --pos 0x0 \
             --output $MONITOR2 --mode 1920x1080 --pos 1920x0
    '')
  ];
}
{
  environment.systemPackages = with pkgs; [
    (writeShellScriptBin "setup-monitors" ''
      #!/usr/bin/env bash
      LOG_FILE="/tmp/monitor-setup.log"

      # Logging function
      log() {
        echo "$(date): $1" >> "$LOG_FILE"
      }

      log "Starting monitor setup"

      # Get connected monitors
      MONITORS=$(xrandr | grep " connected" | cut -d' ' -f1)
      log "Connected monitors: $MONITORS"

      # Primary monitor setup
      PRIMARY=$(echo "$MONITORS" | head -n1)
      log "Primary monitor: $PRIMARY"

      # Detailed xrandr configuration
      xrandr --output "$PRIMARY" --primary --mode 1920x1080 --pos 0x0

      # Additional monitors
      OTHER_MONITORS=$(echo "$MONITORS" | grep -v "$PRIMARY")
      POSITION=1920
      for MONITOR in $OTHER_MONITORS; do
        log "Configuring monitor: $MONITOR"
        xrandr --output "$MONITOR" --mode 1920x1080 --pos "$POSITION"x0
        POSITION=$((POSITION + 1920))
      done

      log "Monitor setup complete"
    '')
  ];

  # Systemd service for persistent setup
  systemd.services.monitor-setup = {
    description = "Flexible Monitor Configuration";
    wantedBy = [ "graphical.target" ];
    after = [ "graphical-session.target" ];
    serviceConfig = {
      Type = "oneshot";
      ExecStart = "${pkgs.writeShellScript "run-monitor-setup" ''
        export DISPLAY=:0
        export XAUTHORITY=/home/youruser/.Xauthority
        /run/current-system/sw/bin/setup-monitors
      ''}";
    };
  };
}

# user level autostart
{
  home-manager.users.youruser = {
    xsession.initExtra = ''
      /run/current-system/sw/bin/setup-monitors
    '';
  };
}


# whole script:
{
  environment.systemPackages = with pkgs; [
    (writeShellScriptBin "setup-monitors" ''
      #!/usr/bin/env bash
      LOG_FILE="/tmp/monitor-setup.log"

      # Logging function
      log() {
        echo "$(date): $1" >> "$LOG_FILE"
      }

      log "Starting monitor setup"

      # Get connected monitors
      MONITORS=$(xrandr | grep " connected" | cut -d' ' -f1)
      log "Connected monitors: $MONITORS"

      # Primary monitor setup
      PRIMARY=$(echo "$MONITORS" | head -n1)
      log "Primary monitor: $PRIMARY"

      # Detailed xrandr configuration
      xrandr --output "$PRIMARY" --primary --mode 1920x1080 --pos 0x0

      # Additional monitors
      OTHER_MONITORS=$(echo "$MONITORS" | grep -v "$PRIMARY")
      POSITION=1920
      for MONITOR in $OTHER_MONITORS; do
        log "Configuring monitor: $MONITOR"
        xrandr --output "$MONITOR" --mode 1920x1080 --pos "$POSITION"x0
        POSITION=$((POSITION + 1920))
      done

      log "Monitor setup complete"
    '')
  ];

  # Systemd service for persistent setup
  systemd.services.monitor-setup = {
    description = "Flexible Monitor Configuration";
    wantedBy = [ "graphical.target" ];
    after = [ "graphical-session.target" ];
    serviceConfig = {
      Type = "oneshot";
      ExecStart = "${pkgs.writeShellScript "run-monitor-setup" ''
        export DISPLAY=:0
        export XAUTHORITY=/home/youruser/.Xauthority
        /run/current-system/sw/bin/setup-monitors
      ''}";
    };
  };
}
